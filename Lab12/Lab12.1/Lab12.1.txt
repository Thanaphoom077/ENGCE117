#include <stdio.h>
#include <limits.h>
#include <stdbool.h>

int minDistance(int dist[], bool sptSet[], int n) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < n; v++)
        if (sptSet[v] == false && dist[v] <= min)
            min = dist[v], min_index = v;
    return min_index;
}

int* Dijkstra(int* graph, int n) {
    int* dist = new int[n];
    bool* sptSet = new bool[n];

    for (int i = 0; i < n; i++)
        dist[i] = INT_MAX, sptSet[i] = false;

    dist[0] = 0;

    for (int count = 0; count < n - 1; count++) {
        int u = minDistance(dist, sptSet, n);

        sptSet[u] = true;

        for (int v = 0; v < n; v++)
            if (!sptSet[v] && graph[u * n + v] != -1 && dist[u] != INT_MAX && dist[u] + graph[u * n + v] < dist[v])
                dist[v] = dist[u] + graph[u * n + v];
    }

    return dist;
}

int main() {
    int n = 5, i = 0, j = 0, *d, *g;
    g = new int[n * n];
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            g[i * n + j] = -1;

    g[0 * n + 1] = 100; g[0 * n + 2] = 80;
    g[0 * n + 3] = 30;  g[0 * n + 4] = 10;
    g[1 * n + 2] = 20;  g[3 * n + 1] = 20;
    g[3 * n + 2] = 20;  g[4 * n + 3] = 10;

    d = Dijkstra(g, n);
    for (i = 0; i < n; i++)
        printf("%d ", d[i]);
    return 0;
}
